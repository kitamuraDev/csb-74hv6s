{"version":3,"sources":["hooks/useFetch.ts","hooks/useFilter.ts","components/DarkModeToggleIcon.tsx","components/Header.tsx","components/PostItem.tsx","App.tsx","index.tsx"],"names":["useFetch","url","useState","isLoading","setIsLoading","data","setData","useEffect","setTimeout","axios","get","then","res","useFilter","targetArray","filtered","setFiltered","filter","useCallback","text","title","toLowerCase","search","useDarkModeToggleIcon","useColorMode","colorMode","toggleColorMode","aria-label","icon","onClick","Header","memo","props","focusRef","useRef","handleFilter","mt","mb","p","w","justify","align","variant","placeholder","base","sm","md","mr","onChange","e","ref","DarkModeToggleIcon","PostItem","filterd","templateColumns","gap","map","post","key","id","border","borderColor","borderRadius","as","size","noOfLines","fontSize","body","App","target","value","trim","thickness","speed","emptyColor","color","rootElement","document","getElementById","ReactDOMClient","render"],"mappings":"oNA0BeA,EAvBE,SAAIC,GACnB,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,qBAAxB,mBAAOG,EAAP,KAAaC,EAAb,KAkBA,OAJAC,qBAAU,WAVRH,GAAa,GACbI,YAAW,WACTC,IAAMC,IAAOT,GAAKU,MAAK,SAACC,GACtBN,EAAQM,EAAIP,SAEdD,GAAa,KACZ,OAMF,IAEI,CAAEC,OAAMF,cCGFU,EAvBG,SAACC,GACjB,MAAgCZ,qBAAhC,mBAAOa,EAAP,KAAiBC,EAAjB,KAmBA,OAhBAT,qBAAU,WACRS,EAAYF,KACX,CAACA,IAcG,CAAEC,WAAUE,OAXJC,uBACb,SAACC,GACCH,EACEF,EAAYG,QACV,mBAAqD,IAArD,EAAGG,MAAkBC,cAAcC,OAAOH,SAIhD,CAACL,M,gCCJUS,EAZe,WAC5B,MAAuCC,cAA/BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,gBAEnB,OACE,kBAAC,IAAD,CACEC,aAAW,kBACXC,KAAoB,UAAdH,EAAwB,kBAAC,IAAD,MAAe,kBAAC,IAAD,MAC7CI,QAASH,KCuBAI,EA1BYC,gBAAK,SAACC,GAC/B,IAAMC,EAAWC,iBAAyB,MAClCC,EAAiBH,EAAjBG,aAOR,OACE,kBAAC,IAAD,CAAMC,GAAI,EAAGC,GAAI,EAAGC,EAAG,EAAGC,EAAE,OAAOC,QAAQ,eAAeC,MAAM,UAE9D,kBAAC,IAAD,CACEC,QAAQ,UACRC,YAAY,eACZJ,EAAG,CAAEK,KAAM,KAAMC,GAAI,KAAMC,GAAI,MAC/BC,GAAI,CAAEH,KAAM,EAAGE,GAAI,GACnBE,SAAU,SAACC,GAAD,OAAOd,EAAac,IAC9BC,IAAKjB,IAGP,kBAACkB,EAAD,UCESC,EAvBcrB,gBAAK,SAACC,GACjC,IAAQqB,EAAYrB,EAAZqB,QAER,OACE,kBAAC,IAAD,CAAMC,gBAAgB,uCAAuCC,IAAK,EAAGjB,EAAG,GAAxE,OACGe,QADH,IACGA,OADH,EACGA,EAASG,KAAI,SAACC,GAAD,OACZ,kBAAC,IAAD,CACEC,IAAKD,EAAKE,GACVC,OAAO,MACPC,YAAY,WACZC,aAAa,OACbxB,EAAG,GAEH,kBAAC,IAAD,CAASyB,GAAG,KAAKC,KAAK,KAAKC,UAAW,EAAG5B,GAAI,GAC1CoB,EAAKrC,OAER,kBAAC,IAAD,CAAM8C,SAAS,MAAMT,EAAKU,cCTrB,SAASC,IACtB,MAA4BpE,EAC1B,8CADMK,EAAR,EAAQA,KAAMF,EAAd,EAAcA,UAGd,EAA6BU,EAAUR,GAA/BU,EAAR,EAAQA,SAAUE,EAAlB,EAAkBA,OAGZkB,EAAejB,uBACnB,SAAC+B,GAE+B,KAA1BA,EAAEoB,OAAOC,MAAMC,SACjBtB,EAAEoB,OAAOC,MAAQ,IAEnBrD,EAAOgC,EAAEoB,OAAOC,SAElB,CAACrD,IAGH,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQkB,aAAcA,IACrBhC,EACC,kBAAC,IAAD,CACEqE,UAAU,MACVC,MAAM,QACNC,WAAW,WACXC,MAAM,WACNX,KAAK,OAGP,kBAAC,EAAD,CAAUX,QAAStC,MCzC7B,IAAM6D,EAAcC,SAASC,eAAe,QAC/BC,aAA0BH,GAElCI,OACH,kBAAC,aAAD,KACE,kBAACZ,EAAD,S","file":"static/js/main.ebe6bf04.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useFetch = <T>(url: string) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState<T>();\r\n\r\n  // fetcher\r\n  const fetchData = () => {\r\n    setIsLoading(true);\r\n    setTimeout(() => {\r\n      axios.get<T>(url).then((res) => {\r\n        setData(res.data);\r\n      });\r\n      setIsLoading(false);\r\n    }, 3000);\r\n  };\r\n\r\n  // first render fetch data\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return { data, isLoading };\r\n};\r\n\r\nexport default useFetch;\r\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ResponseDataType } from \"../types\";\n\nconst useFilter = (targetArray: ResponseDataType[]) => {\n  const [filtered, setFiltered] = useState<ResponseDataType[]>();\n\n  // useFilterの内部で、引数に渡されたtargetArrayをuseEffectを使って、filteredにセットする\n  useEffect(() => {\n    setFiltered(targetArray);\n  }, [targetArray]);\n\n  // 引数のtextで配列をfilterして、filteredにセットする\n  const filter = useCallback(\n    (text: string) => {\n      setFiltered(\n        targetArray.filter(\n          ({ title }) => title.toLowerCase().search(text) !== -1\n        )\n      );\n    },\n    [targetArray]\n  );\n\n  return { filtered, filter };\n};\n\nexport default useFilter;\n","import React from \"react\";\r\nimport { SunIcon, MoonIcon } from \"@chakra-ui/icons\";\r\nimport { IconButton, useColorMode } from \"@chakra-ui/react\";\r\n\r\nconst useDarkModeToggleIcon = () => {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  return (\r\n    <IconButton\r\n      aria-label=\"DarkMode switch\"\r\n      icon={colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\r\n      onClick={toggleColorMode}\r\n    />\r\n  );\r\n};\r\n\r\nexport default useDarkModeToggleIcon;\r\n","import { Flex, Input } from \"@chakra-ui/react\";\r\nimport React, { memo, useEffect, useRef, VFC } from \"react\";\r\nimport DarkModeToggleIcon from \"./DarkModeToggleIcon\";\r\n\r\ntype Props = {\r\n  handleFilter: React.ChangeEventHandler<HTMLInputElement>;\r\n};\r\n\r\nconst Header: VFC<Props> = memo((props) => {\r\n  const focusRef = useRef<HTMLInputElement>(null);\r\n  const { handleFilter } = props;\r\n\r\n  // input area focus\r\n  // useEffect(() => {\r\n  //   focusRef.current?.focus();\r\n  // }, []);\r\n\r\n  return (\r\n    <Flex mt={5} mb={5} p={3} w=\"100%\" justify=\"space-around\" align=\"center\">\r\n      {/* input */}\r\n      <Input\r\n        variant=\"flushed\"\r\n        placeholder=\"検索\"\r\n        w={{ base: \"xs\", sm: \"md\", md: \"xl\" }}\r\n        mr={{ base: 5, md: 0 }}\r\n        onChange={(e) => handleFilter(e)}\r\n        ref={focusRef}\r\n      />\r\n      {/* darkmord toggle button */}\r\n      <DarkModeToggleIcon />\r\n    </Flex>\r\n  );\r\n});\r\n\r\nexport default Header;\r\n","import { Grid, GridItem, Heading, Text } from \"@chakra-ui/react\";\r\nimport React, { memo, VFC } from \"react\";\r\nimport { ResponseDataType } from \"../types\";\r\n\r\ntype Props = {\r\n  filterd: ResponseDataType[];\r\n};\r\n\r\nconst PostItem: VFC<Props> = memo((props) => {\r\n  const { filterd } = props;\r\n\r\n  return (\r\n    <Grid templateColumns=\"repeat(auto-fit, minmax(250px, 1fr))\" gap={5} p={3}>\r\n      {filterd?.map((post) => (\r\n        <GridItem\r\n          key={post.id}\r\n          border=\"1px\"\r\n          borderColor=\"blue.300\"\r\n          borderRadius=\"base\"\r\n          p={2}\r\n        >\r\n          <Heading as=\"h2\" size=\"md\" noOfLines={1} mb={1}>\r\n            {post.title}\r\n          </Heading>\r\n          <Text fontSize=\"sm\">{post.body}</Text>\r\n        </GridItem>\r\n      ))}\r\n    </Grid>\r\n  );\r\n});\r\n\r\nexport default PostItem;\r\n","import React, { ChangeEvent, useCallback } from \"react\";\nimport { ChakraProvider, Spinner, VStack } from \"@chakra-ui/react\";\n\nimport useFetch from \"./hooks/useFetch\";\nimport useFilter from \"./hooks/useFilter\";\nimport Header from \"./components/Header\";\nimport PostItem from \"./components/PostItem\";\nimport { ResponseDataType } from \"./types\";\n\n/**\n * description\n *  - incremental search\n *  - darkmode compatible\n */\n\nexport default function App() {\n  const { data, isLoading } = useFetch<ResponseDataType[]>(\n    \"https://jsonplaceholder.typicode.com/posts\"\n  );\n  const { filtered, filter } = useFilter(data!);\n\n  // filter handler\n  const handleFilter = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      // 空文字を入力させない\n      if (e.target.value.trim() === \"\") {\n        e.target.value = \"\";\n      }\n      filter(e.target.value);\n    },\n    [filter]\n  );\n\n  return (\n    <ChakraProvider>\n      <VStack>\n        <Header handleFilter={handleFilter} />\n        {isLoading ? (\n          <Spinner\n            thickness=\"4px\"\n            speed=\"0.65s\"\n            emptyColor=\"gray.200\"\n            color=\"blue.500\"\n            size=\"xl\"\n          />\n        ) : (\n          <PostItem filterd={filtered!} />\n        )}\n      </VStack>\n    </ChakraProvider>\n  );\n}\n","import React, { StrictMode } from \"react\";\nimport * as ReactDOMClient from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\")!;\nconst root = ReactDOMClient.createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}